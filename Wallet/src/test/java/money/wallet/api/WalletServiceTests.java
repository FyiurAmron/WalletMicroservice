package money.wallet.api;

import money.wallet.api.data.WalletAmount;
import money.wallet.api.data.WalletOperation;
import money.wallet.api.data.WalletOperationType;
import money.wallet.api.service.RepositoryWalletService;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;

import javax.persistence.EntityExistsException;
import javax.persistence.EntityNotFoundException;

import static org.junit.jupiter.api.Assertions.*;

@SuppressWarnings( "SimplifiableAssertion" ) // assertEquals instead of assertNull for visual consistency
@Tag( TestUtils.INTEGRATION_TAG )
@SpringBootTest
@AutoConfigureTestDatabase
@DirtiesContext( classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD )
// alternatively, to speed things up, create a context doing a DB reset at setup
public class WalletServiceTests {
    private static final long EXAMPLE_TRANSACTION_ID = 0xDEAD_BEEF;
    private static final long EXAMPLE_AMOUNT = 42;

    @Autowired
    private RepositoryWalletService walletService;

    // we don't expose this type of comparison in WalletAmount to not pollute the implementation
    private void assertAmountEquals( Long nullableAmount, WalletAmount walletAmount ) {
        if ( nullableAmount == null ) {
            assertEquals( null, walletAmount ); // better test fail message than assertNull
        } else {
            assertEquals(
                    new WalletAmount( nullableAmount ),
                    walletAmount
            );
        }
    }

    private void assertOperationResults(
            WalletOperation walletOperation,
            WalletOperationType type,
            Long amount,
            Long balanceBefore,
            Long balanceAfter,
            Long transactionId
    ) {
        assertEquals(
                type,
                walletOperation.type()
        );
        assertAmountEquals(
                amount,
                walletOperation.amount()
        );
        assertAmountEquals(
                balanceBefore,
                walletOperation.balanceBefore()
        );
        assertAmountEquals(
                balanceAfter,
                walletOperation.balanceAfter()
        );
        assertEquals(
                transactionId,
                walletOperation.transactionId()
        );
    }

    @Test
    public void isWalletCreatedEmpty() {
        WalletOperation createWalletOperation = walletService.createWallet();

        assertOperationResults(
                createWalletOperation,
                WalletOperationType.CREATE,
                null,
                null,
                0L,
                null
        );
    }

    @Test
    public void isWalletBalanceZeroAfterCreation() {
        WalletOperation createWalletOperation = walletService.createWallet();
        WalletOperation balanceWalletOperation = walletService.getBalance( createWalletOperation.walletId() );

        assertOperationResults(
                balanceWalletOperation,
                WalletOperationType.BALANCE,
                null,
                0L,
                0L,
                null
        );
    }

    @Test
    public void throwsWhenWalletNotYetCreated() {
        assertThrows( EntityNotFoundException.class, () -> {
            walletService.getBalance( 1 ); // id=1 would usually be the 1st one autogenerated
        } );
    }

    @Test
    public void areAmountsProperlyDeposited() {
        WalletOperation createWalletOperation = walletService.createWallet();
        WalletOperation makeDepositWalletOperation = walletService.makeDeposit(
                createWalletOperation.walletId(),
                EXAMPLE_AMOUNT,
                EXAMPLE_TRANSACTION_ID
        );

        assertOperationResults(
                makeDepositWalletOperation,
                WalletOperationType.DEPOSIT,
                EXAMPLE_AMOUNT,
                0L,
                EXAMPLE_AMOUNT,
                EXAMPLE_TRANSACTION_ID
        );

        WalletOperation makeDepositWalletResponse2 = walletService.makeDeposit(
                createWalletOperation.walletId(),
                EXAMPLE_AMOUNT * 2,
                EXAMPLE_TRANSACTION_ID + 1
        );

        assertOperationResults(
                makeDepositWalletResponse2,
                WalletOperationType.DEPOSIT,
                EXAMPLE_AMOUNT * 2,
                EXAMPLE_AMOUNT,
                EXAMPLE_AMOUNT * 3,
                EXAMPLE_TRANSACTION_ID + 1
        );
    }

    @Test
    public void throwsOnDepositsWithNonUniqueIds() {
        WalletOperation createWalletOperation = walletService.createWallet();
        WalletOperation makeDepositWalletOperation = walletService.makeDeposit(
                createWalletOperation.walletId(),
                EXAMPLE_AMOUNT,
                EXAMPLE_TRANSACTION_ID
        );
        assertThrows( EntityExistsException.class, () -> {
            WalletOperation makeDepositWalletResponse2 = walletService.makeDeposit(
                    createWalletOperation.walletId(),
                    EXAMPLE_AMOUNT * 2,
                    EXAMPLE_TRANSACTION_ID
            );
        } );
    }

    /*
    @Test
    public void isWalletRemoved() {
    }
    */
}
